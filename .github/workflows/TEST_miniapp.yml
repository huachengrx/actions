name: TEST_miniapp
on:
  workflow_dispatch:
env:
  BRANCH_PROD: test
  REPOSITORY: 'huachengrx/miniapp'
  FEISHU_APP_GITHUB_ID: cli_a6966acc9169100b
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY }}
          ref: ${{ env.BRANCH_PROD }}
          token: ${{ secrets.ACTION_TOKEN }}
          node-version: 20

      - name: Get the latest commit SHA of the repository
        id: get-sha
        run: echo "sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

      - name: Get current date
        id: current-date
        run: echo "date=$(TZ=Asia/Shanghai date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Get last few commits
        id: last-commits
        run: |
          commits=$(git log -n 3 --pretty=format:"%h - %s" | tr '\n' ' ' | cut -c 1-100)
          echo "commits=${commits}" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 8.14.1
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Build MiniProgram
        run: |
          pnpm i
          pnpm build:weapp

      - name: Compile MiniProgram
        id: preview
        uses: action-wechat-miniprogram-upload
        with:
          action_type: preview
          workspace: ./dist
          version: ${{ steps.current-date.outputs.date }}${{ steps.get-sha.outputs.sha }}
          description: ${{ steps.last-commits.outputs.commits }}
          upload_key: ${{ secrets.WAPP_PRIVATE_KEY }}
          ci: 24
        env:
          PRIVATE_KEY: ${{ secrets.WAPP_PRIVATE_KEY }}

      # 获取飞书租户访问令牌
      - name: Get Feishu Tenant Access Token
        id: get_feishu_token
        env:
          FEISHU_APP_ID: ${{ env.FEISHU_APP_GITHUB_ID }}
          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_GITHUB_SECRET }}
        run: |
          response=$(curl -s -X POST \
            "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal" \
            -H "Content-Type: application/json; charset=utf-8" \
            -d "{\"app_id\":\"$FEISHU_APP_ID\",\"app_secret\":\"$FEISHU_APP_SECRET\"}")
          
          token=$(echo $response | jq -r '.tenant_access_token')
          if [ "$token" = "null" ] || [ -z "$token" ]; then
            echo "::error::Failed to get tenant access token: $response"
            exit 1
          fi
          echo "tenant_access_token=$token" >> $GITHUB_OUTPUT
          echo "::add-mask::$token"

      # 解码二维码图片
      - name: Decode QR Code Image
        id: decode_qrcode
        run: |
          mkdir -p qrcode_tmp
          echo "${{ steps.preview.outputs.preview_qrcode }}" | base64 --decode > qrcode_tmp/preview.png
          echo "image_path=qrcode_tmp/preview.png" >> $GITHUB_OUTPUT

      # 上传图片到飞书
      - name: Upload Image to Feishu
        id: upload_feishu
        env:
          FEISHU_TOKEN: ${{ steps.get_feishu_token.outputs.tenant_access_token }}
        run: |
          upload_response=$(curl -s -X POST \
            -H "Authorization: Bearer $FEISHU_TOKEN" \
            -F "image_type=message" \
            -F "image=@${{ steps.decode_qrcode.outputs.image_path }}" \
            "https://open.feishu.cn/open-apis/im/v1/images")
          
          image_key=$(echo $upload_response | jq -r '.data.image_key')
          if [ "$image_key" = "null" ] || [ -z "$image_key" ]; then
            echo "::error::Failed to upload image: $upload_response"
            exit 1
          fi
          echo "image_key=$image_key" >> $GITHUB_OUTPUT
          echo "::add-mask::$image_key"

      # 发送飞书消息通知
      - name: Send Feishu Notification
        if: success() && steps.upload_feishu.outputs.image_key
        env:
          FEISHU_TOKEN: ${{ steps.get_feishu_token.outputs.tenant_access_token }}
          FEISHU_CHAT_ID: oc_107f404e7d4920100c6cf70246215ca3
        run: |
          commit_info="${{ steps.last-commits.outputs.commits }}"
          version="${{ steps.current-date.outputs.date }}${{ steps.get-sha.outputs.sha }}"
          image_key="${{ steps.upload_feishu.outputs.image_key }}"
          uuid=$(cat /proc/sys/kernel/random/uuid)

          message_payload=$(cat <<EOF
          {
            "msg_type": "interactive",
            "card": {
              "config": {
                "wide_screen_mode": true
              },
              "elements": [
                {
                  "tag": "div",
                  "text": {
                    "content": " ** 版本号 ** : ${version}\n\n ** 最近提交 ** : ${commit_info}",
                    "tag": "lark_md"
                  }
                },
                {
                  "tag": "img",
                  "img_key": "${image_key}",
                  "alt": {
                    "content": "小程序预览二维码",
                    "tag": "plain_text"
                  }
                },
                {
                  "tag": "action",
                  "actions": [
                    {
                      "tag": "button",
                      "text": {
                        "content": "查看构建详情",
                        "tag": "plain_text"
                      },
                      "type": "primary",
                      "url": "https://github.com/${{ env.REPOSITORY }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ],
              "header": {
                "title": {
                  "content": "🚀 小程序体验版已生成",
                  "tag": "plain_text"
                },
                "template": "blue"
              }
            }
          }
          EOF
          )

          curl -i -X POST 'https://open.feishu.cn/open-apis/im/v1/messages?receive_id_type=chat_id' \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $FEISHU_TOKEN" \
            -d "{
              \"content\": $(echo $message_payload | jq -c '.card'),
              \"msg_type\": \"interactive\",
              \"receive_id\": \"$FEISHU_CHAT_ID\",
              \"uuid\": \"$uuid\"
            }"